<feed xmlns="http://www.w3.org/2005/Atom"> <id>/miniature-enigma/</id><title>Mahendran</title><subtitle>Exploring android/compose/flutter/springboot</subtitle> <updated>2021-06-02T13:43:19+05:30</updated> <author> <name>your_full_name</name> <uri>/miniature-enigma/</uri> </author><link rel="self" type="application/atom+xml" href="/miniature-enigma/feed.xml"/><link rel="alternate" type="text/html" hreflang="en-US" href="/miniature-enigma/"/> <generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator> <rights> Â© 2021 your_full_name </rights> <icon>/miniature-enigma/assets/img/favicons/favicon.ico</icon> <logo>/miniature-enigma/assets/img/favicons/favicon-96x96.png</logo> <entry><title>GraphQL backend â€” token expiry</title><link href="/miniature-enigma/posts/gql-auth-401/" rel="alternate" type="text/html" title="GraphQL backend â€” token expiry" /><published>2021-06-01T00:00:00+05:30</published> <updated>2021-06-01T00:00:00+05:30</updated> <id>/miniature-enigma/posts/gql-auth-401/</id> <content src="/miniature-enigma/posts/gql-auth-401/" /> <author> <name>your_full_name</name> </author> <summary> In the previous post we covered authentication and role management. However, it assumed any invalid session to be a visitor instead of throwing 401â€”Unauthorized client error. This post covers the token expiry aspect of API call. Letâ€™s start with coding part. Following block diagram explains the interaction between each component. As usual, weâ€™ll build the system bottom-up. ðŸŽŸ Token Servic... </summary> </entry> <entry><title>GraphQL backend â€” authorization &amp; authentication</title><link href="/miniature-enigma/posts/gql-auth/" rel="alternate" type="text/html" title="GraphQL backend â€” authorization &amp; authentication" /><published>2021-05-31T00:00:00+05:30</published> <updated>2021-05-31T00:00:00+05:30</updated> <id>/miniature-enigma/posts/gql-auth/</id> <content src="/miniature-enigma/posts/gql-auth/" /> <author> <name>your_full_name</name> </author> <summary> GraphQL backend â€” authorization &amp;amp; authentication Background In any system where users interacting with each other, authorization &amp;amp; authentication are the key elements that controls what each user can do. To read more on authentication and authorization try RBAC. To demonstrate the usecases, I present few roles and resources below. This is an e-commerce website. Role ... </summary> </entry> <entry><title>LeetCode â€” Median of Two Sorted Arrays</title><link href="/miniature-enigma/posts/L4-median/" rel="alternate" type="text/html" title="LeetCode â€” Median of Two Sorted Arrays" /><published>2021-05-28T00:00:00+05:30</published> <updated>2021-05-28T00:00:00+05:30</updated> <id>/miniature-enigma/posts/L4-median/</id> <content src="/miniature-enigma/posts/L4-median/" /> <author> <name>your_full_name</name> </author> <summary> Problem definition is here. Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays. Sample inputs What is median? Draft Hypothesis Iteration Picking elements Handling odd/even number of elements Solution Sample inputs Input: nums1 = [1,3], nums2 = [2] Output: 2.00000 Explanation: merged a... </summary> </entry> <entry><title>Kotlin solution for the longest Substring Without Repeating Characters</title><link href="/miniature-enigma/posts/length-of-substring/" rel="alternate" type="text/html" title="Kotlin solution for the longest Substring Without Repeating Characters" /><published>2021-05-27T00:00:00+05:30</published> <updated>2021-05-27T00:00:00+05:30</updated> <id>/miniature-enigma/posts/length-of-substring/</id> <content src="/miniature-enigma/posts/length-of-substring/" /> <author> <name>your_full_name</name> </author> <summary> Kotlin solution for the longest Substring Without Repeating Characters For problem definition head over to leetcode problem#3. For a given string, we need to find the length of the longest substring. Listed few sample input and outputs below for understanding. Max() = 0 Max(a) = 1 Max(aa) = 1 Max(ab) = 2 Max(abca) = 3 Max(abcdefghijk) = 11 Max(abccabcde) = 5 Max(abccabdefghabcababcab) = 8 ... </summary> </entry> <entry><title>GraphQL backend â€” pagination &amp; filters</title><link href="/miniature-enigma/posts/gql-filters-pagination/" rel="alternate" type="text/html" title="GraphQL backend â€” pagination &amp; filters" /><published>2021-05-25T00:00:00+05:30</published> <updated>2021-05-25T00:00:00+05:30</updated> <id>/miniature-enigma/posts/gql-filters-pagination/</id> <content src="/miniature-enigma/posts/gql-filters-pagination/" /> <author> <name>your_full_name</name> </author> <summary> GraphQL backend â€” pagination &amp;amp; filters Background Pagination and filters are the much needed components when it comes to listing. They not only narrow down the list for the user, but improves load time and save user from scanning through lots of pages. Overall content engagement will improve when the list is on point and incrementally loaded in small chunks. This post covers setup &amp;amp; im... </summary> </entry> </feed>
